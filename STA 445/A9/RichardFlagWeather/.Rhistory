quality.time.plot
emote.dream.data <- dream.data %>%
mutate( dream.emotions = strsplit( as.character( dream.emotions ), ",")) %>%
unnest( dream.emotions )
emote.dream.data$dream.emotions <- gsub(" ", "", emote.dream.data$dream.emotions)
emote.dream.data$dream.emotions <- as.factor( emote.dream.data$dream.emotions )
emote.dream.data$dream.emotions <- forcats::fct_infreq( emote.dream.data$dream.emotions )
q20 <- qualitative_hcl(20, "Dark2")
ggplot( data=subset( emote.dream.data, !is.na( dream.emotions ) ),
aes( x=dream.emotions ) ) +
geom_bar( aes( fill=dream.emotions ) ) +
labs( title="Observed Dream Emotion Occurances",
x="Emotion", y="Number of Occurances" ) +
theme(axis.text.x = element_text(angle = 45, hjust=1),
legend.position = "none") +
scale_fill_manual(values = rainbow(nlevels(emote.dream.data$dream.emotions),
start=0.55, end=0.85))
lm_eqn <- function(df){
m <- lm(dream.quality ~ dream.duration, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
dream.quality.time <- ggplot( data=dream.data ) +
geom_smooth( method="lm",
aes( x=dream.duration,
y=dream.quality ) ) +
geom_point( aes( x=dream.duration,
y=dream.quality ) ) +
labs( title="Dream Duration vs. Dream Quality",
x="Dream Duration", y="Dream Quality" ) +
geom_text(x = 3, y = 5.5, label = lm_eqn(dream.data), parse = TRUE) +
geom_count( aes( x=dream.duration, y=dream.quality,
size=after_stat( n ), color=after_stat( n ) ) ) +
theme( legend.position = "none" )
dream.quality.time
lm_eqn <- function(df){
m <- lm(dream.quality ~ dream.recall, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
ggplot( data=dream.data, aes( x=dream.quality, y=dream.recall ) ) +
geom_smooth( method="lm" ) +
geom_point( aes( x=dream.quality,
y=dream.recall ) ) +
labs( title="Dream Quality vs. Dream Recall",
x="Dream Quality", y="Dream Recall" ) +
geom_text(x = 3, y = 5, label = lm_eqn(dream.data), parse = TRUE) +
geom_count( aes( size=after_stat( n ), color=after_stat( n ) ) ) +
theme( legend.position = "none" )
ggplot( data=long.data, aes( x=Dose, y=Sleep.Quality ) ) +
geom_point( aes( color=Supplement ) ) +
geom_smooth( method="lm",
aes( col=Supplement, fill=Supplement ),
se=T ) +
guides( fill = "none" ) +
labs( x="Oneirogen Dose (mg)", y="Sleep Quality",
title="Sleep Quality by Oneirogen Taken" ) +
facet_wrap(~Supplement) +
stat_cor( label.y=0 ) +
ylim(-1, 6) +
theme(legend.position = "none") +
geom_count( aes( size=after_stat( n ), color=Supplement ) )
ggplot( data=long.data, aes( x=Dose, y=dream.quality ) ) +
geom_point( aes( color=Supplement ) ) +
geom_smooth( method="lm",
aes( col=Supplement, fill=Supplement ),
se=T ) +
guides( fill = "none" ) +
labs( x="Oneirogen Dose (mg)", y="Dream Quality",
title="Dream Quality by Oneirogen Taken" ) +
facet_wrap(~Supplement) +
stat_cor( label.y=0 ) +
ylim(-1, 6) +
theme(legend.position = "none") +
geom_count( aes( size=after_stat( n ), color=Supplement ) )
ggplot( data=dream.data, aes( x=dream.quality ) ) +
geom_bar( aes( fill=supplements ), position="dodge" ) +
labs( title="Dream Quality by Oneirogens Taken",
x="Dream Quality", y="Number of Occurances", fill="Oneirogens" )
ggplot( data=dream.data, aes( x=Timestamp ) ) +
geom_histogram( fill="skyblue3", color="black" ) +
labs( title="Survey Responses Over Time", x="Date", y="Responses Recieved" )
nums <- unlist(lapply(dream.data, is.numeric), use.names = FALSE)
test <- dream.data[,nums]
test[is.na(test)] <- 0
mydata.cor = cor( test, method = c("spearman"))
palette = colorRampPalette(c("green", "yellow", "red")) (20)
heatmap(x = mydata.cor, col = palette, symm = TRUE, cexRow=0.5, cexCol=0.5)
ggplot( data=long.data, aes( x=Dose, y=dream.recall ) ) +
geom_point( aes( color=Supplement ) ) +
geom_smooth( method="lm",
aes( col=Supplement, fill=Supplement ),
se=T ) +
guides( fill = "none" ) +
labs( x="Oneirogen Dose (mg)", y="Dream Recall",
title="Dream Recall by Oneirogen Taken" ) +
facet_wrap(~Supplement) +
stat_cor( label.y=0 ) +
ylim(-1, 6) +
theme(legend.position = "none") +
geom_count( aes( size=after_stat( n ), color=Supplement ) )
ggplot( data=dream.data, aes( x=Sleep.Quality, y=dream.quality ) ) +
geom_point()
ggplot(data=dream.data, aes(x=dreamed) ) +
geom_bar( aes( by=supplements, fill=supplements ), position="dodge") +
facet_wrap( dream.quality~Sleep.Quality, labeller="label_both" )
emote.dream.data$Oneirogens <- emote.dream.data$supplements
ggplot(data=emote.dream.data, aes( x=dream.quality, y=..count../sum(..count..) ) ) +
geom_bar( aes( fill=dream.emotions ),
position="dodge") +
labs( title="Emotions by Oneirogens Taken", x="Dream Quality",
y="Proportion of Responses", fill="Emotions" ) +
facet_wrap( ~Oneirogens, labeller = "label_both" )
model.data <- dream.data %>%
mutate( across ( where( is.numeric ), ~replace_na(.x, 0) ) ) %>%
mutate( combined = Sleep.Quality + dream.quality )
dream.model <- lm( data=model.data, combined ~ Blue.Lotus + Wormwood + Valerian.Root )
summary( dream.model )
ggPredict( dream.model )
install.packages("MASS")
knitr::opts_chunk$set(echo = TRUE)
P <- c( 0, 0, 10, 10, 20, 20, 30 )
F0 <- c( 26, 25, 18, 18, 12, 13, 11 )
F12 <- c( 28, 30, 19, 21, 14, 15, 14 )
F24 <- c( 30, 35, 20, 24, 14, 17, 15 )
F36 <- c( 32, 40, 21, 28, 16, 20, 17 )
F48 <- c( 34, 50, 24, 33, 17, 24, 18 )
F60 <- c( 37, 60, 24, 41, 17, 29, 25 )
hw8.data <- dataframe( P, F0, F12, F24, F36, F48, F60 )
P <- c( 0, 0, 10, 10, 20, 20, 30 )
F0 <- c( 26, 25, 18, 18, 12, 13, 11 )
F12 <- c( 28, 30, 19, 21, 14, 15, 14 )
F24 <- c( 30, 35, 20, 24, 14, 17, 15 )
F36 <- c( 32, 40, 21, 28, 16, 20, 17 )
F48 <- c( 34, 50, 24, 33, 17, 24, 18 )
F60 <- c( 37, 60, 24, 41, 17, 29, 25 )
hw8.data <- data.frame( P, F0, F12, F24, F36, F48, F60 )
p <- c( 0, 10, 20,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30 )
f <- c( 0, 0, 0,
12, 12, 12, 12,
24, 24, 24, 24,
36, 36, 36, 36,
48, 48, 48, 48,
60, 60, 60, 60 )
Y <- c( 26, 18, 12,
28, 19, 14, 12,
30, 20, 14, 12,
32, 21, 16, 13,
34, 24, 17, 14,
37, 24, 17, 14 )
hw8.data <- data.frame( p, f, Y )
p <- c( 0, 10, 20,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30 )
f <- c( 0, 0, 0,
12, 12, 12, 12,
24, 24, 24, 24,
36, 36, 36, 36,
48, 48, 48, 48,
60, 60, 60, 60 )
Y <- c( 26, 18, 12,
28, 19, 14, 12,
30, 20, 14, 12,
32, 21, 16, 13,
34, 24, 17, 14,
37, 24, 17, 14 )
hw8.data <- data.frame( p, f, Y )
model <- lm( Y ~ p + f, data=hw8.data )
summary( model )
knitr::opts_chunk$set(echo = TRUE)
library( MASS )
p <- c( 0, 10, 20,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30 )
f <- c( 0, 0, 0,
12, 12, 12, 12,
24, 24, 24, 24,
36, 36, 36, 36,
48, 48, 48, 48,
60, 60, 60, 60 )
Y <- c( 26, 18, 12,
28, 19, 14, 12,
30, 20, 14, 12,
32, 21, 16, 13,
34, 24, 17, 14,
37, 24, 17, 14 )
hw8.data <- data.frame( p, f, Y )
model <- lm( Y ~ p + f, data=hw8.data )
boxcox( model, ploitit=T )
p <- c( 0, 10, 20,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30 )
f <- c( 0, 0, 0,
12, 12, 12, 12,
24, 24, 24, 24,
36, 36, 36, 36,
48, 48, 48, 48,
60, 60, 60, 60 )
Y <- c( 26, 18, 12,
28, 19, 14, 12,
30, 20, 14, 12,
32, 21, 16, 13,
34, 24, 17, 14,
37, 24, 17, 14 )
hw8.data <- data.frame( p, f, Y )
model <- lm( Y ~ p + f, data=hw8.data )
boxcox( model, plotit=T )
boxcox( model, plotit=T, lambda=seq( -1.2, -0.2, by=0.01 ) )
p <- c( 0, 10, 20,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30 )
f <- c( 0, 0, 0,
12, 12, 12, 12,
24, 24, 24, 24,
36, 36, 36, 36,
48, 48, 48, 48,
60, 60, 60, 60 )
Y <- c( 26, 18, 12,
28, 19, 14, 12,
30, 20, 14, 12,
32, 21, 16, 13,
34, 24, 17, 14,
37, 24, 17, 14 )
hw8.data <- data.frame( p, f, Y )
model <- lm( Y ~ p + f, data=hw8.data )
boxcox( model, plotit=T, lambda=seq( -1.2, -0.2, by=0.01 ) )
z <- boxcox(ymodel, plotit=F, lambda=seq(-0.2, 0.2,by=0.01))
p <- c( 0, 10, 20,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30 )
f <- c( 0, 0, 0,
12, 12, 12, 12,
24, 24, 24, 24,
36, 36, 36, 36,
48, 48, 48, 48,
60, 60, 60, 60 )
Y <- c( 26, 18, 12,
28, 19, 14, 12,
30, 20, 14, 12,
32, 21, 16, 13,
34, 24, 17, 14,
37, 24, 17, 14 )
hw8.data <- data.frame( p, f, Y )
model <- lm( Y ~ p + f, data=hw8.data )
boxcox( model, plotit=T, lambda=seq( -1.2, -0.2, by=0.01 ) )
z <- boxcox( model, plotit=F, lambda=seq(-0.2, 0.2,by=0.01))
z
index <- which(z$y == max(z$y))
index
lambda <- z$x[index]
lambda
z <- boxcox( model, plotit=F, lambda=seq(-1.2, -0.2,by=0.01))
z
index
lambda <- z$x[index]
lambda
z <- boxcox( model, plotit=F, lambda=seq(-1.2, -0.2,by=0.01))
z
index <- which(z$y == max(z$y))
index
lambda <- z$x[index]
lambda
best.model <- lm( Y^( lambda ) ~ p + f, data=hw8.data )
knitr::opts_chunk$set(echo = TRUE)
library( MASS )
p <- c( 0, 10, 20,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30,
0, 10, 20, 30 )
f <- c( 0, 0, 0,
12, 12, 12, 12,
24, 24, 24, 24,
36, 36, 36, 36,
48, 48, 48, 48,
60, 60, 60, 60 )
Y <- c( 26, 18, 12,
28, 19, 14, 12,
30, 20, 14, 12,
32, 21, 16, 13,
34, 24, 17, 14,
37, 24, 17, 14 )
hw8.data <- data.frame( p, f, Y )
model <- lm( Y ~ p + f, data=hw8.data )
boxcox( model, plotit=T, lambda=seq( -1.2, -0.2, by=0.01 ) )
z <- boxcox( model, plotit=F, lambda=seq(-1.2, -0.2,by=0.01))
z
index <- which(z$y == max(z$y))
index
lambda <- z$x[index]
lambda
best.model <- lm( Y^( lambda ) ~ p + f, data=hw8.data )
summary( best.model )
summary( model )
plot(fitted(ymodel), resid(ymodel), xlab='Y Fitted', ylab='Y Residual', main='Residual Vs. Fitted')
summary( model )
plot( fitted( model ), resid( model ), xlab='Y Fitted', ylab='Y Residual', main='Residual Vs. Fitted')
# Model Summary
summary( model )
# Residual Plot of Model Residuals
plot( fitted( model ), resid( model ), xlab='Y Fitted', ylab='Y Residual', main='Residual Vs. Fitted')
abline(0, 0, lty = 2)
# Q-Q Plot of Model Residuals
qqnorm( resid( model ), main = "The Q-Q plot for Y Residuals" )
abline( mean( resid( model ) ), sd( resid( model ) ) )
knitr::opts_chunk$set(fig.height = 9, fig.width = 7)
knitr::opts_chunk$set(fig.height = 4, fig.width = 7)
knitr::opts_chunk$set(echo = TRUE)
library( MASS )
# Plot Box-Cox analysis
boxcox( model, plotit=T, lambda=seq( -1.2, -0.2, by=0.01 ) )
z <- boxcox( model, plotit=F, lambda=seq(-1.2, -0.2,by=0.01))
index <- which(z$y == max(z$y))
lambda <- z$x[index]
best.model <- lm( Y^( lambda ) ~ p + f, data=hw8.data )
summary( best.model )
plot( fitted( model ), resid( model ), xlab='Fitted', ylab='Residual', main='Residual Plot for Original Model')
abline(0, 0, lty = 2)
plot( fitted( best.model ), resid( model.4 ), xlab='Fitted', ylab='Residual', main='Residual Plot for Transformed Model' )
qqnorm( resid( model ),
main="Q-Q Plot for Original Model" )
abline( mean( resid( model ) ),
sd( resid( model ) ) )
qqnorm( resid( best.model ),
main="Q-Q Plot for Transformed Model")
abline( mean( resid( best.model ) ),
sd( resid( best.model ) ) )
shapiro.test( resid( model ) )
shapiro.test( resid( best.model ) )
?Flagstaff_Weather
?Flagstaff_Weather
library(RichardFlagWeather)
?RichardFlagWeather
?Flagstaff_Weather
Flagstaff_Weather
load("~/School/STA 445/A9/RichardFlagWeather/data/Flagstaff_Weather.rda")
devtools::load_all(".")
library(RichardFlagWeather)
Flagstaff_Weather
?Flagstaff_Weather
?RichardFlagWeather
?append
FizzBuzz(10)
library(RichardFlagWeather)
library(RichardFlagWeather)
fizz.buzz(10)
pog <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10 )
library(RichardFlagWeather)
fizz.buzz( pog )
fizz.buzz( pog )
library(RichardFlagWeather)
fizz.buzz( pog )
fizz.buzz( pog )
library(RichardFlagWeather)
butt <- fizz.buzz( pog )
library(RichardFlagWeather)
butt <- fizz.buzz( pog )
butt
library(RichardFlagWeather)
butt <- fizz.buzz( pog )
butt
library(RichardFlagWeather)
?FizzBuzz
library(RichardFlagWeather)
?FizzBuzz
?hello
usethis::use_testthat()
library(RichardFlagWeather)
library(RichardFlagWeather)
library(RichardFlagWeather)
?Flagstaff_Weather
?FizzBuzz
roxygen2::roxygenise()
library(RichardFlagWeather)
?FizzBuzz
usethis::use_testthat()
library(RichardFlagWeather)
library(RichardFlagWeather)
usethis::use_testthat()
usethis::use_testthat()
use_test()
usethis::use_test()
usethis::use_test()
library(RichardFlagWeather)
while( true ){ print("8=====D") }
while( True ){ print("8=====D") }
while( 1==1 ){ print("8=====D") }
library(RichardFlagWeather)
knitr::opts_chunk$set(echo = TRUE)
X <- c( 18, 20, 24, 28, 30, 33, 36, 48, 60, 40, 42, 45, 62, 71, 75 )
Y <- c( 4.8, 5.5, 5.8, 6.0, 6.5, 6.6, 6.7, 7.0, 7.3, 3.3, 3.8, 4.1, 5.0, 5.5, 6.0 )
f.or.m <- c( 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 )
hw9.data <- data.frame( X, Y, f.or.m )
X <- c( 18, 20, 24, 28, 30, 33, 36, 48, 60, 40, 42, 45, 62, 71, 75 )
Y <- c( 4.8, 5.5, 5.8, 6.0, 6.5, 6.6, 6.7, 7.0, 7.3, 3.3, 3.8, 4.1, 5.0, 5.5, 6.0 )
D <- c( 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 )
hw9.data <- data.frame( Y, X, D )
hw9.model <- lm( Y ~ X + D + DX )
X <- c( 18, 20, 24, 28, 30, 33, 36, 48, 60, 40, 42, 45, 62, 71, 75 )
Y <- c( 4.8, 5.5, 5.8, 6.0, 6.5, 6.6, 6.7, 7.0, 7.3, 3.3, 3.8, 4.1, 5.0, 5.5, 6.0 )
D <- c( 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 )
hw9.data <- data.frame( Y, X, D )
hw9.model <- lm( Y ~ X + D + DX )
hw9.model <- lm( Y ~ X + D + D*X )
summary( hw9.model )
hw9.model <- lm( Y ~ X + D + I( D * X ) )
summary( hw9.model )
4.518222 - 3.64065
0.052310 + 0.014659
hw9.data.f <- hw9.data[ hw9.data$D == 0 ]
hw9.data.f <- hw9.data[ D == 0 ]
hw9.data[ D == 0 ]
hw9.data[ hw9.data$D == 0 ]
hw9.data[ hw9.data$D ]
subset( hw9.data.f, D == 0 )
subset( hw9.data, D == 0 )
hw9.data.f <- subset( hw9.data, D == 0 )
hw9.model.f <- lm( Y ~ X, data=hw9.data.f )
summary( hw9.model.f )
hw9.data.m <- subset( hw9.data, D == 1 )
hw9.model.m <- lm( Y ~ X, data=hw9.data.m )
summary( hw9.model.m )
hw9.data.f <- subset( hw9.data, D == 0 )
hw9.model.f <- lm( Y ~ X, data=hw9.data.f )
summary( hw9.model.f )
hw9.data.m <- subset( hw9.data, D == 1 )
hw9.model.m <- lm( Y ~ X, data=hw9.data.m )
summary( hw9.model.m )
plot( X ~ Y )
abline( hw9.model.f )
abline( hw9.model.m )
plot( )
abline( hw9.model.f )
plot.new()
abline( hw9.model.f )
abline( hw9.model.m )
plot.new( c(0, 1, 2, 3, 4, 5) ~ c(0, 1, 2, 3, 4, 5))
plot.new( y = c(0, 1, 2, 3, 4, 5), x= c(0, 1, 2, 3, 4, 5))
b <- inv( X )
b <- cor( sd( X ), sd( Y ) )
t <- ( b - 0.014659 ) / ( 0.014659 )
b <- cor( sd( X ), sd( Y ) )
t <- ( b - 0.014659 ) / ( 0.014659 )
t
b <- cor( sd( X ), sd( Y ) )
t <- ( b - 0.014659 ) / ( 0.014659 )
t
b
b <- cor( sd( Y ), sd( X ) )
t <- ( b - 0.014659 ) / ( 0.014659 )
t
b
sd( y )
sd( Y )
sd( X )
sy <- sd( Y )
sx <- sd( X )
b <- cor( sd( Y ), sd( X ) )
t <- ( b - 0.014659 ) / ( 0.014659 )
t
b
cor( sy, sx)
cor( sx, sy )
sy <- sd( Y )
sx <- sd( X )
b <- cor( Y, X )*( sy/sx )
t <- ( b - 0.014659 ) / ( 0.014659 )
t
b
sy <- sd( Y )
sx <- sd( X )
b <- cor( X, Y )*( sy/sx )
t <- ( b - 0.014659 ) / ( 0.014659 )
sy <- sd( Y )
sx <- sd( X )
b <- cor( X, Y )*( sy/sx )
t <- ( b - 0.014659 ) / ( 0.012337 )
t
plot.new()
abline( hw9.model.f )
plot.new()
abline( hw9.model.f )
plot.new()
abline( hw9.model.f )
abline( hw9.model.m )
