move_x = rmultinom(1, size = x_move[j], prob = prob_move[,j])
for(i in 1:n_pop){
x_mat[(counter+1),i] = x_mat[(counter+1),i] + move_x[i]
}
}
if(y_move[j] > 0){
move_y = rmultinom(1, size = y_move[j], prob = prob_move[,j])
for(i in 1:n_pop){
y_mat[(counter+1),i] = y_mat[(counter+1),i] + move_y[i]
}
}
if(z_move[j] > 0){
move_z = rmultinom(1, size = z_move[j], prob = prob_move[,j])
for(i in 1:n_pop){
z_mat[(counter+1),i] = z_mat[(counter+1),i] + move_z[i]
}
}
} # end j loop
# Advance the counter:
counter = counter + 1
# Check to see if any are zero
for(i in 1:n_pop){
if(x_mat[counter,i] < 0) x_mat[counter,i] = 0
if(y_mat[counter,i] < 0) y_mat[counter,i] = 0
if(z_mat[counter,i] < 0) z_mat[counter,i] = 0
}
# Recalculate population size (because of migrants!)
for(i in 1:n_pop){
pop_N[i] = x_mat[counter, i] + y_mat[counter, i] + z_mat[counter, i]
}
}
distance_between_pop1_pop3[i] = abs(sqrt((x_coord[1] + x_coord[3])^2 + (y_coord[1] + y_coord[3])^2))
time_max_infected_pop3[i] = which.max(y_mat[,3])
}
plot(NA,NA,
xlim = c(min(time_max_infected_pop3), max(time_max_infected_pop3)),
ylim = c(min(distance_between_pop1_pop3), max(distance_between_pop1_pop3)),
xlab = "Distance from i to j",
ylab = "Probability of Dispersal")
points(time_max_infected_pop3, distance_between_pop1_pop3)
####################################################
# FUNCTION #
####################################################
tau_leap_1step = function(counter, tau, pop_N, x_mat, y_mat, z_mat,
x_move, y_move, z_move, this_pop, beta, gamma, m){
# Events: Transmission, Recovery, Migrate:X, Migrate:Y, Migrate:Z
n_events = 5
if(pop_N[this_pop] > 0){
# Scale beta by population size
beta_scaled = beta / pop_N[this_pop]
# Event probabilities:
event_rate = vector(mode = "numeric", length = n_events)
## Transmission:
event_rate[1] = beta_scaled * x_mat[counter, this_pop] * y_mat[counter, this_pop]
## Recovery:
event_rate[2] = gamma * y_mat[counter, this_pop]
## Migrate: X
event_rate[3] = m * x_mat[counter, this_pop]
## Migrate: Y
event_rate[4] = m * y_mat[counter, this_pop]
## Migrate: Z
event_rate[5] = m * z_mat[counter, this_pop]
# How many events of each type will occur over time period tau
n_occur = vector(mode = "numeric", length = n_events)
for(i in 1:n_events){
# Poisson random variate
n_occur[i] = rpois(1, event_rate[i] * tau)
}
}else{
n_occur = rep(0, n_events)
}
return(n_occur)
}
n_runs = 100
distance_between_pop1_pop3 = rep(1, n_runs)
time_max_infected_pop3 = rep(1, n_runs)
for (i in 1:n_runs){
####################################################
# SET-UP #
####################################################
# Number of populations
n_pop = 4
# Create x-y coordinates
x_coord = c(8,6,runif(1, min=5, max=25),13)
y_coord = c(8,14,runif(1, min=5, max=25),13)
pop_ID = c(1:n_pop)
# Calculate pair-wise distance, based on x-y coords
# Create a distance matrix:
xy_mat = cbind(x_coord, y_coord)
dist_mat = dist(xy_mat, diag = TRUE, upper = TRUE)
dist_mat = as.matrix(dist_mat)
# Probability of movement
prob_move = matrix(0, n_pop, n_pop)
theta = 3
for(i in 1:n_pop){
for(j in 1:n_pop){
if(i != j){
prob_move[i, j] = 1 / exp(dist_mat[i,j] / theta)
}
}
}
# Time
tau = 1 # leap size (arbitrary)
t_max = 150
n_times = floor(t_max / tau)
t_vec = seq(1, t_max, length.out = n_times)
# Population sizes
pop_N = vector(mode = "numeric", length = n_pop)
pop_N = rep(150, n_pop) # each pop size is equal
# Sizes of X, Y, and Z for each population
x_mat = matrix(0, nrow = n_times, ncol = n_pop)
y_mat = matrix(0, nrow = n_times, ncol = n_pop)
z_mat = matrix(0, nrow = n_times, ncol = n_pop)
# Sizes of X, Y, and Z MIGRANTS for each population
## How many move at each time step
x_move = vector(mode = "numeric", length = n_pop)
y_move = vector(mode = "numeric", length = n_pop)
z_move = vector(mode = "numeric", length = n_pop)
# INITIAL CONDITIONS
## Seed population 1 with infected individuals
y_mat[1,1] = 5
x_mat[1,] = pop_N - y_mat[1,] # this is a vectorized function
# Parameters
beta = 0.35
gamma = 1/5
m = 1/50
####################################################
# Run one realization of the system
####################################################
# counter
counter = 1
for(t in 1:(n_times-1)){
for(i in 1:n_pop){
this_pop = i
n_occur = tau_leap_1step(counter, tau, pop_N, x_mat, y_mat, z_mat,
x_move, y_move, z_move, this_pop, beta, gamma, m)
#------------------------------------------------------
# Update your populations:
## Events: Transmission, Recovery, Migrate-X, Migrate-Y, Migrate-Z
x_mat[(counter+1), this_pop] = x_mat[counter, this_pop] -
n_occur[1] - n_occur[3]
y_mat[(counter+1), this_pop] = y_mat[counter, this_pop] +
n_occur[1] - n_occur[2] - n_occur[4]
z_mat[(counter+1), this_pop] = z_mat[counter, this_pop] +
n_occur[2] - n_occur[5]
x_move[this_pop] = n_occur[3]
y_move[this_pop] = n_occur[4]
z_move[this_pop] = n_occur[5]
} # end i loop
#------------------------------------------------------
#------------------------------------------------------
# Disperse the migrants into new populations, based on distance
# Note: the multinomial distribution helps us randomly determine
# how many individuals will move to a particular new location,
# based on the probability of moving
for(j in 1:n_pop){ # Move from j to i
if(x_move[j] > 0){
move_x = rmultinom(1, size = x_move[j], prob = prob_move[,j])
for(i in 1:n_pop){
x_mat[(counter+1),i] = x_mat[(counter+1),i] + move_x[i]
}
}
if(y_move[j] > 0){
move_y = rmultinom(1, size = y_move[j], prob = prob_move[,j])
for(i in 1:n_pop){
y_mat[(counter+1),i] = y_mat[(counter+1),i] + move_y[i]
}
}
if(z_move[j] > 0){
move_z = rmultinom(1, size = z_move[j], prob = prob_move[,j])
for(i in 1:n_pop){
z_mat[(counter+1),i] = z_mat[(counter+1),i] + move_z[i]
}
}
} # end j loop
# Advance the counter:
counter = counter + 1
# Check to see if any are zero
for(i in 1:n_pop){
if(x_mat[counter,i] < 0) x_mat[counter,i] = 0
if(y_mat[counter,i] < 0) y_mat[counter,i] = 0
if(z_mat[counter,i] < 0) z_mat[counter,i] = 0
}
# Recalculate population size (because of migrants!)
for(i in 1:n_pop){
pop_N[i] = x_mat[counter, i] + y_mat[counter, i] + z_mat[counter, i]
}
}
distance_between_pop1_pop3[i] = abs(sqrt(abs(x_coord[1] - x_coord[3])^2 + abs(y_coord[1] - y_coord[3])^2))
time_max_infected_pop3[i] = which.max(y_mat[,3])
}
plot(NA,NA,
xlim = c(min(time_max_infected_pop3), max(time_max_infected_pop3)),
ylim = c(min(distance_between_pop1_pop3), max(distance_between_pop1_pop3)),
xlab = "Distance from i to j",
ylab = "Probability of Dispersal")
points(time_max_infected_pop3, distance_between_pop1_pop3)
View(dist_mat)
####################################################
# FUNCTION #
####################################################
tau_leap_1step = function(counter, tau, pop_N, x_mat, y_mat, z_mat,
x_move, y_move, z_move, this_pop, beta, gamma, m){
# Events: Transmission, Recovery, Migrate:X, Migrate:Y, Migrate:Z
n_events = 5
if(pop_N[this_pop] > 0){
# Scale beta by population size
beta_scaled = beta / pop_N[this_pop]
# Event probabilities:
event_rate = vector(mode = "numeric", length = n_events)
## Transmission:
event_rate[1] = beta_scaled * x_mat[counter, this_pop] * y_mat[counter, this_pop]
## Recovery:
event_rate[2] = gamma * y_mat[counter, this_pop]
## Migrate: X
event_rate[3] = m * x_mat[counter, this_pop]
## Migrate: Y
event_rate[4] = m * y_mat[counter, this_pop]
## Migrate: Z
event_rate[5] = m * z_mat[counter, this_pop]
# How many events of each type will occur over time period tau
n_occur = vector(mode = "numeric", length = n_events)
for(i in 1:n_events){
# Poisson random variate
n_occur[i] = rpois(1, event_rate[i] * tau)
}
}else{
n_occur = rep(0, n_events)
}
return(n_occur)
}
n_runs = 100
distance_between_pop1_pop3 = rep(1, n_runs)
time_max_infected_pop3 = rep(1, n_runs)
for (i in 1:n_runs){
####################################################
# SET-UP #
####################################################
# Number of populations
n_pop = 4
# Create x-y coordinates
x_coord = c(8,6,runif(1, min=5, max=25),13)
y_coord = c(8,14,runif(1, min=5, max=25),13)
pop_ID = c(1:n_pop)
# Calculate pair-wise distance, based on x-y coords
# Create a distance matrix:
xy_mat = cbind(x_coord, y_coord)
dist_mat = dist(xy_mat, diag = TRUE, upper = TRUE)
dist_mat = as.matrix(dist_mat)
# Probability of movement
prob_move = matrix(0, n_pop, n_pop)
theta = 3
for(i in 1:n_pop){
for(j in 1:n_pop){
if(i != j){
prob_move[i, j] = 1 / exp(dist_mat[i,j] / theta)
}
}
}
# Time
tau = 1 # leap size (arbitrary)
t_max = 150
n_times = floor(t_max / tau)
t_vec = seq(1, t_max, length.out = n_times)
# Population sizes
pop_N = vector(mode = "numeric", length = n_pop)
pop_N = rep(150, n_pop) # each pop size is equal
# Sizes of X, Y, and Z for each population
x_mat = matrix(0, nrow = n_times, ncol = n_pop)
y_mat = matrix(0, nrow = n_times, ncol = n_pop)
z_mat = matrix(0, nrow = n_times, ncol = n_pop)
# Sizes of X, Y, and Z MIGRANTS for each population
## How many move at each time step
x_move = vector(mode = "numeric", length = n_pop)
y_move = vector(mode = "numeric", length = n_pop)
z_move = vector(mode = "numeric", length = n_pop)
# INITIAL CONDITIONS
## Seed population 1 with infected individuals
y_mat[1,1] = 5
x_mat[1,] = pop_N - y_mat[1,] # this is a vectorized function
# Parameters
beta = 0.35
gamma = 1/5
m = 1/50
####################################################
# Run one realization of the system
####################################################
# counter
counter = 1
for(t in 1:(n_times-1)){
for(i in 1:n_pop){
this_pop = i
n_occur = tau_leap_1step(counter, tau, pop_N, x_mat, y_mat, z_mat,
x_move, y_move, z_move, this_pop, beta, gamma, m)
#------------------------------------------------------
# Update your populations:
## Events: Transmission, Recovery, Migrate-X, Migrate-Y, Migrate-Z
x_mat[(counter+1), this_pop] = x_mat[counter, this_pop] -
n_occur[1] - n_occur[3]
y_mat[(counter+1), this_pop] = y_mat[counter, this_pop] +
n_occur[1] - n_occur[2] - n_occur[4]
z_mat[(counter+1), this_pop] = z_mat[counter, this_pop] +
n_occur[2] - n_occur[5]
x_move[this_pop] = n_occur[3]
y_move[this_pop] = n_occur[4]
z_move[this_pop] = n_occur[5]
} # end i loop
#------------------------------------------------------
#------------------------------------------------------
# Disperse the migrants into new populations, based on distance
# Note: the multinomial distribution helps us randomly determine
# how many individuals will move to a particular new location,
# based on the probability of moving
for(j in 1:n_pop){ # Move from j to i
if(x_move[j] > 0){
move_x = rmultinom(1, size = x_move[j], prob = prob_move[,j])
for(i in 1:n_pop){
x_mat[(counter+1),i] = x_mat[(counter+1),i] + move_x[i]
}
}
if(y_move[j] > 0){
move_y = rmultinom(1, size = y_move[j], prob = prob_move[,j])
for(i in 1:n_pop){
y_mat[(counter+1),i] = y_mat[(counter+1),i] + move_y[i]
}
}
if(z_move[j] > 0){
move_z = rmultinom(1, size = z_move[j], prob = prob_move[,j])
for(i in 1:n_pop){
z_mat[(counter+1),i] = z_mat[(counter+1),i] + move_z[i]
}
}
} # end j loop
# Advance the counter:
counter = counter + 1
# Check to see if any are zero
for(i in 1:n_pop){
if(x_mat[counter,i] < 0) x_mat[counter,i] = 0
if(y_mat[counter,i] < 0) y_mat[counter,i] = 0
if(z_mat[counter,i] < 0) z_mat[counter,i] = 0
}
# Recalculate population size (because of migrants!)
for(i in 1:n_pop){
pop_N[i] = x_mat[counter, i] + y_mat[counter, i] + z_mat[counter, i]
}
}
distance_between_pop1_pop3[i] = dist_mat[1, 3]
time_max_infected_pop3[i] = which.max(y_mat[,3])
}
plot(NA,NA,
xlim = c(min(time_max_infected_pop3), max(time_max_infected_pop3)),
ylim = c(min(distance_between_pop1_pop3), max(distance_between_pop1_pop3)),
xlab = "Distance from i to j",
ylab = "Probability of Dispersal")
points(time_max_infected_pop3, distance_between_pop1_pop3)
####################################################
# FUNCTION #
####################################################
tau_leap_1step = function(counter, tau, pop_N, x_mat, y_mat, z_mat,
x_move, y_move, z_move, this_pop, beta, gamma, m){
# Events: Transmission, Recovery, Migrate:X, Migrate:Y, Migrate:Z
n_events = 5
if(pop_N[this_pop] > 0){
# Scale beta by population size
beta_scaled = beta / pop_N[this_pop]
# Event probabilities:
event_rate = vector(mode = "numeric", length = n_events)
## Transmission:
event_rate[1] = beta_scaled * x_mat[counter, this_pop] * y_mat[counter, this_pop]
## Recovery:
event_rate[2] = gamma * y_mat[counter, this_pop]
## Migrate: X
event_rate[3] = m * x_mat[counter, this_pop]
## Migrate: Y
event_rate[4] = m * y_mat[counter, this_pop]
## Migrate: Z
event_rate[5] = m * z_mat[counter, this_pop]
# How many events of each type will occur over time period tau
n_occur = vector(mode = "numeric", length = n_events)
for(i in 1:n_events){
# Poisson random variate
n_occur[i] = rpois(1, event_rate[i] * tau)
}
}else{
n_occur = rep(0, n_events)
}
return(n_occur)
}
n_runs = 100
distance_between_pop1_pop3 = rep(1, n_runs)
time_max_infected_pop3 = rep(1, n_runs)
for (i in 1:n_runs){
####################################################
# SET-UP #
####################################################
# Number of populations
n_pop = 4
# Create x-y coordinates
x_coord = c(8,6,runif(1, min=5, max=25),13)
y_coord = c(8,14,runif(1, min=5, max=25),13)
pop_ID = c(1:n_pop)
# Calculate pair-wise distance, based on x-y coords
# Create a distance matrix:
xy_mat = cbind(x_coord, y_coord)
dist_mat = dist(xy_mat, diag = TRUE, upper = TRUE)
dist_mat = as.matrix(dist_mat)
# Probability of movement
prob_move = matrix(0, n_pop, n_pop)
theta = 3
for(i in 1:n_pop){
for(j in 1:n_pop){
if(i != j){
prob_move[i, j] = 1 / exp(dist_mat[i,j] / theta)
}
}
}
# Time
tau = 1 # leap size (arbitrary)
t_max = 150
n_times = floor(t_max / tau)
t_vec = seq(1, t_max, length.out = n_times)
# Population sizes
pop_N = vector(mode = "numeric", length = n_pop)
pop_N = rep(150, n_pop) # each pop size is equal
# Sizes of X, Y, and Z for each population
x_mat = matrix(0, nrow = n_times, ncol = n_pop)
y_mat = matrix(0, nrow = n_times, ncol = n_pop)
z_mat = matrix(0, nrow = n_times, ncol = n_pop)
# Sizes of X, Y, and Z MIGRANTS for each population
## How many move at each time step
x_move = vector(mode = "numeric", length = n_pop)
y_move = vector(mode = "numeric", length = n_pop)
z_move = vector(mode = "numeric", length = n_pop)
# INITIAL CONDITIONS
## Seed population 1 with infected individuals
y_mat[1,1] = 5
x_mat[1,] = pop_N - y_mat[1,] # this is a vectorized function
# Parameters
beta = 0.35
gamma = 1/5
m = 1/50
####################################################
# Run one realization of the system
####################################################
# counter
counter = 1
for(t in 1:(n_times-1)){
for(i in 1:n_pop){
this_pop = i
n_occur = tau_leap_1step(counter, tau, pop_N, x_mat, y_mat, z_mat,
x_move, y_move, z_move, this_pop, beta, gamma, m)
#------------------------------------------------------
# Update your populations:
## Events: Transmission, Recovery, Migrate-X, Migrate-Y, Migrate-Z
x_mat[(counter+1), this_pop] = x_mat[counter, this_pop] -
n_occur[1] - n_occur[3]
y_mat[(counter+1), this_pop] = y_mat[counter, this_pop] +
n_occur[1] - n_occur[2] - n_occur[4]
z_mat[(counter+1), this_pop] = z_mat[counter, this_pop] +
n_occur[2] - n_occur[5]
x_move[this_pop] = n_occur[3]
y_move[this_pop] = n_occur[4]
z_move[this_pop] = n_occur[5]
} # end i loop
#------------------------------------------------------
#------------------------------------------------------
# Disperse the migrants into new populations, based on distance
# Note: the multinomial distribution helps us randomly determine
# how many individuals will move to a particular new location,
# based on the probability of moving
for(j in 1:n_pop){ # Move from j to i
if(x_move[j] > 0){
move_x = rmultinom(1, size = x_move[j], prob = prob_move[,j])
for(i in 1:n_pop){
x_mat[(counter+1),i] = x_mat[(counter+1),i] + move_x[i]
}
}
if(y_move[j] > 0){
move_y = rmultinom(1, size = y_move[j], prob = prob_move[,j])
for(i in 1:n_pop){
y_mat[(counter+1),i] = y_mat[(counter+1),i] + move_y[i]
}
}
if(z_move[j] > 0){
move_z = rmultinom(1, size = z_move[j], prob = prob_move[,j])
for(i in 1:n_pop){
z_mat[(counter+1),i] = z_mat[(counter+1),i] + move_z[i]
}
}
} # end j loop
# Advance the counter:
counter = counter + 1
# Check to see if any are zero
for(i in 1:n_pop){
if(x_mat[counter,i] < 0) x_mat[counter,i] = 0
if(y_mat[counter,i] < 0) y_mat[counter,i] = 0
if(z_mat[counter,i] < 0) z_mat[counter,i] = 0
}
# Recalculate population size (because of migrants!)
for(i in 1:n_pop){
pop_N[i] = x_mat[counter, i] + y_mat[counter, i] + z_mat[counter, i]
}
}
distance_between_pop1_pop3[i] = dist_mat[1, 3]
time_max_infected_pop3[i] = which.max(y_mat[,3])
}
plot(NA,NA,
xlim = c(min(time_max_infected_pop3), max(time_max_infected_pop3)),
ylim = c(min(distance_between_pop1_pop3), max(distance_between_pop1_pop3)),
xlab = "Distance from i to j",
ylab = "Probability of Dispersal")
lines(time_max_infected_pop3, distance_between_pop1_pop3)
