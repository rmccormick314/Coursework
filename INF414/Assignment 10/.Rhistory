#------------------------------------------------------
#------------------------------------------------------
# Update state variables
## First figure out which hosts go to which classes
n_e_to_asym = rbinom(1, size = n_occur[4], prob = params$c1)
n_e_to_sym = n_occur[4] - n_e_to_asym
n_sym_to_hosp = rbinom(1, size = n_occur[6], prob = params$c2)
n_sym_to_recov = n_occur[6] - n_sym_to_hosp
n_hosp_to_dead = rbinom(1, size = n_occur[7], prob = params$c3)
n_hosp_to_recov = n_occur[7] - n_hosp_to_dead
# Now update the state variables
s_vec[(t+1)] = s_vec[t] - sum(n_occur[1:3])
e_vec[(t+1)] = e_vec[t] + sum(n_occur[1:3]) - n_occur[4]
ia_vec[(t+1)] = ia_vec[t] + n_e_to_asym - n_occur[5]
is_vec[(t+1)] = is_vec[t] + n_e_to_sym - n_occur[6]
ih_vec[(t+1)] = ih_vec[t] + n_sym_to_hosp - n_occur[7]
d_vec[(t+1)] = d_vec[t] + n_hosp_to_dead
r_vec[(t+1)] = r_vec[t] + n_occur[5] + n_sym_to_recov + n_hosp_to_recov
#------------------------------------------------------
#------------------------------------------------------
# Correct if any < 0
if(s_vec[(t+1)] < 0) s_vec[(t+1)] = 0
if(e_vec[(t+1)] < 0) e_vec[(t+1)] = 0
if(ia_vec[(t+1)] < 0) ia_vec[(t+1)] = 0
if(is_vec[(t+1)] < 0) is_vec[(t+1)] = 0
if(ih_vec[(t+1)] < 0) ih_vec[(t+1)] = 0
if(d_vec[(t+1)] < 0) d_vec[(t+1)] = 0
if(r_vec[(t+1)] < 0) r_vec[(t+1)] = 0
new_hospitalizations_vector <- append(new_hospitalizations_vector,
n_sym_to_hosp)
# Advance the time:
t = t + 1
}
lines(new_hospitalizations_vector ~ t_vec, col="black")
}
t = 1
new_hospitalizations_vector = vector(mode="numeric")
new_hospitalizations_vector <- append(new_hospitalizations_vector, 0)
plot(NA,NA,
xlim = c(min(t_vec), max(t_vec)),
ylim = c(0, 15),
xlab = "Time (days)",
ylab = "New Hospitalizations per Day")
for (i in 1:50){
new_hospitalizations_vector = vector(mode="numeric")
while(t <= (n_times-1)){
# Move forward one time:
n_occur = tau_leap_1step(t, tau, s_vec, e_vec, ia_vec,
is_vec, ih_vec, params)
#------------------------------------------------------
#------------------------------------------------------
# Update state variables
## First figure out which hosts go to which classes
n_e_to_asym = rbinom(1, size = n_occur[4], prob = params$c1)
n_e_to_sym = n_occur[4] - n_e_to_asym
n_sym_to_hosp = rbinom(1, size = n_occur[6], prob = params$c2)
n_sym_to_recov = n_occur[6] - n_sym_to_hosp
n_hosp_to_dead = rbinom(1, size = n_occur[7], prob = params$c3)
n_hosp_to_recov = n_occur[7] - n_hosp_to_dead
# Now update the state variables
s_vec[(t+1)] = s_vec[t] - sum(n_occur[1:3])
e_vec[(t+1)] = e_vec[t] + sum(n_occur[1:3]) - n_occur[4]
ia_vec[(t+1)] = ia_vec[t] + n_e_to_asym - n_occur[5]
is_vec[(t+1)] = is_vec[t] + n_e_to_sym - n_occur[6]
ih_vec[(t+1)] = ih_vec[t] + n_sym_to_hosp - n_occur[7]
d_vec[(t+1)] = d_vec[t] + n_hosp_to_dead
r_vec[(t+1)] = r_vec[t] + n_occur[5] + n_sym_to_recov + n_hosp_to_recov
#------------------------------------------------------
#------------------------------------------------------
# Correct if any < 0
if(s_vec[(t+1)] < 0) s_vec[(t+1)] = 0
if(e_vec[(t+1)] < 0) e_vec[(t+1)] = 0
if(ia_vec[(t+1)] < 0) ia_vec[(t+1)] = 0
if(is_vec[(t+1)] < 0) is_vec[(t+1)] = 0
if(ih_vec[(t+1)] < 0) ih_vec[(t+1)] = 0
if(d_vec[(t+1)] < 0) d_vec[(t+1)] = 0
if(r_vec[(t+1)] < 0) r_vec[(t+1)] = 0
new_hospitalizations_vector <- append(new_hospitalizations_vector,
n_sym_to_hosp)
# Advance the time:
t = t + 1
}
new_hospitalizations_vector <- append(new_hospitalizations_vector,
0)
lines(new_hospitalizations_vector ~ t_vec, col="black")
}
t = 1
new_hospitalizations_vector = vector(mode="numeric")
new_hospitalizations_vector <- append(new_hospitalizations_vector, 0)
plot(NA,NA,
xlim = c(min(t_vec), max(t_vec)),
ylim = c(0, 15),
xlab = "Time (days)",
ylab = "New Hospitalizations per Day")
for (i in 1:50){
new_hospitalizations_vector = vector(mode="numeric")
while(t <= (n_times-1)){
# Move forward one time:
n_occur = tau_leap_1step(t, tau, s_vec, e_vec, ia_vec,
is_vec, ih_vec, params)
#------------------------------------------------------
#------------------------------------------------------
# Update state variables
## First figure out which hosts go to which classes
n_e_to_asym = rbinom(1, size = n_occur[4], prob = params$c1)
n_e_to_sym = n_occur[4] - n_e_to_asym
n_sym_to_hosp = rbinom(1, size = n_occur[6], prob = params$c2)
n_sym_to_recov = n_occur[6] - n_sym_to_hosp
n_hosp_to_dead = rbinom(1, size = n_occur[7], prob = params$c3)
n_hosp_to_recov = n_occur[7] - n_hosp_to_dead
# Now update the state variables
s_vec[(t+1)] = s_vec[t] - sum(n_occur[1:3])
e_vec[(t+1)] = e_vec[t] + sum(n_occur[1:3]) - n_occur[4]
ia_vec[(t+1)] = ia_vec[t] + n_e_to_asym - n_occur[5]
is_vec[(t+1)] = is_vec[t] + n_e_to_sym - n_occur[6]
ih_vec[(t+1)] = ih_vec[t] + n_sym_to_hosp - n_occur[7]
d_vec[(t+1)] = d_vec[t] + n_hosp_to_dead
r_vec[(t+1)] = r_vec[t] + n_occur[5] + n_sym_to_recov + n_hosp_to_recov
#------------------------------------------------------
#------------------------------------------------------
# Correct if any < 0
if(s_vec[(t+1)] < 0) s_vec[(t+1)] = 0
if(e_vec[(t+1)] < 0) e_vec[(t+1)] = 0
if(ia_vec[(t+1)] < 0) ia_vec[(t+1)] = 0
if(is_vec[(t+1)] < 0) is_vec[(t+1)] = 0
if(ih_vec[(t+1)] < 0) ih_vec[(t+1)] = 0
if(d_vec[(t+1)] < 0) d_vec[(t+1)] = 0
if(r_vec[(t+1)] < 0) r_vec[(t+1)] = 0
new_hospitalizations_vector <- append(new_hospitalizations_vector,
n_sym_to_hosp)
# Advance the time:
t = t + 1
}
new_hospitalizations_vector <- append(new_hospitalizations_vector,
0)
lines(new_hospitalizations_vector ~ t_vec, col="black")
}
t = 1
new_hospitalizations_vector = vector(mode="numeric")
new_hospitalizations_vector <- append(new_hospitalizations_vector, 0)
plot(NA,NA,
xlim = c(min(t_vec), max(t_vec)),
ylim = c(0, 15),
xlab = "Time (days)",
ylab = "New Hospitalizations per Day")
for (i in 1:50){
new_hospitalizations_vector = vector(mode="numeric")
new_hospitalizations_vector <- append(new_hospitalizations_vector, 0)
while(t <= (n_times-1)){
# Move forward one time:
n_occur = tau_leap_1step(t, tau, s_vec, e_vec, ia_vec,
is_vec, ih_vec, params)
#------------------------------------------------------
#------------------------------------------------------
# Update state variables
## First figure out which hosts go to which classes
n_e_to_asym = rbinom(1, size = n_occur[4], prob = params$c1)
n_e_to_sym = n_occur[4] - n_e_to_asym
n_sym_to_hosp = rbinom(1, size = n_occur[6], prob = params$c2)
n_sym_to_recov = n_occur[6] - n_sym_to_hosp
n_hosp_to_dead = rbinom(1, size = n_occur[7], prob = params$c3)
n_hosp_to_recov = n_occur[7] - n_hosp_to_dead
# Now update the state variables
s_vec[(t+1)] = s_vec[t] - sum(n_occur[1:3])
e_vec[(t+1)] = e_vec[t] + sum(n_occur[1:3]) - n_occur[4]
ia_vec[(t+1)] = ia_vec[t] + n_e_to_asym - n_occur[5]
is_vec[(t+1)] = is_vec[t] + n_e_to_sym - n_occur[6]
ih_vec[(t+1)] = ih_vec[t] + n_sym_to_hosp - n_occur[7]
d_vec[(t+1)] = d_vec[t] + n_hosp_to_dead
r_vec[(t+1)] = r_vec[t] + n_occur[5] + n_sym_to_recov + n_hosp_to_recov
#------------------------------------------------------
#------------------------------------------------------
# Correct if any < 0
if(s_vec[(t+1)] < 0) s_vec[(t+1)] = 0
if(e_vec[(t+1)] < 0) e_vec[(t+1)] = 0
if(ia_vec[(t+1)] < 0) ia_vec[(t+1)] = 0
if(is_vec[(t+1)] < 0) is_vec[(t+1)] = 0
if(ih_vec[(t+1)] < 0) ih_vec[(t+1)] = 0
if(d_vec[(t+1)] < 0) d_vec[(t+1)] = 0
if(r_vec[(t+1)] < 0) r_vec[(t+1)] = 0
new_hospitalizations_vector <- append(new_hospitalizations_vector,
n_sym_to_hosp)
# Advance the time:
t = t + 1
}
lines(new_hospitalizations_vector ~ t_vec, col="black")
}
plot(NA,NA,
xlim = c(min(t_vec), max(t_vec)),
ylim = c(0, 15),
xlab = "Time (days)",
ylab = "New Hospitalizations per Day")
for (i in 1:50){
new_hospitalizations_vector = vector(mode="numeric")
new_hospitalizations_vector <- append(new_hospitalizations_vector, 0)
t=1
while(t <= (n_times-1)){
# Move forward one time:
n_occur = tau_leap_1step(t, tau, s_vec, e_vec, ia_vec,
is_vec, ih_vec, params)
#------------------------------------------------------
#------------------------------------------------------
# Update state variables
## First figure out which hosts go to which classes
n_e_to_asym = rbinom(1, size = n_occur[4], prob = params$c1)
n_e_to_sym = n_occur[4] - n_e_to_asym
n_sym_to_hosp = rbinom(1, size = n_occur[6], prob = params$c2)
n_sym_to_recov = n_occur[6] - n_sym_to_hosp
n_hosp_to_dead = rbinom(1, size = n_occur[7], prob = params$c3)
n_hosp_to_recov = n_occur[7] - n_hosp_to_dead
# Now update the state variables
s_vec[(t+1)] = s_vec[t] - sum(n_occur[1:3])
e_vec[(t+1)] = e_vec[t] + sum(n_occur[1:3]) - n_occur[4]
ia_vec[(t+1)] = ia_vec[t] + n_e_to_asym - n_occur[5]
is_vec[(t+1)] = is_vec[t] + n_e_to_sym - n_occur[6]
ih_vec[(t+1)] = ih_vec[t] + n_sym_to_hosp - n_occur[7]
d_vec[(t+1)] = d_vec[t] + n_hosp_to_dead
r_vec[(t+1)] = r_vec[t] + n_occur[5] + n_sym_to_recov + n_hosp_to_recov
#------------------------------------------------------
#------------------------------------------------------
# Correct if any < 0
if(s_vec[(t+1)] < 0) s_vec[(t+1)] = 0
if(e_vec[(t+1)] < 0) e_vec[(t+1)] = 0
if(ia_vec[(t+1)] < 0) ia_vec[(t+1)] = 0
if(is_vec[(t+1)] < 0) is_vec[(t+1)] = 0
if(ih_vec[(t+1)] < 0) ih_vec[(t+1)] = 0
if(d_vec[(t+1)] < 0) d_vec[(t+1)] = 0
if(r_vec[(t+1)] < 0) r_vec[(t+1)] = 0
new_hospitalizations_vector <- append(new_hospitalizations_vector,
n_sym_to_hosp)
# Advance the time:
t = t + 1
}
lines(new_hospitalizations_vector ~ t_vec, col="black")
}
plot(NA,NA,
xlim = c(min(t_vec), max(t_vec)),
ylim = c(0, 20),
xlab = "Time (days)",
ylab = "New Hospitalizations per Day")
for (i in 1:50){
new_hospitalizations_vector = vector(mode="numeric")
new_hospitalizations_vector <- append(new_hospitalizations_vector, 0)
t=1
while(t <= (n_times-1)){
# Move forward one time:
n_occur = tau_leap_1step(t, tau, s_vec, e_vec, ia_vec,
is_vec, ih_vec, params)
#------------------------------------------------------
#------------------------------------------------------
# Update state variables
## First figure out which hosts go to which classes
n_e_to_asym = rbinom(1, size = n_occur[4], prob = params$c1)
n_e_to_sym = n_occur[4] - n_e_to_asym
n_sym_to_hosp = rbinom(1, size = n_occur[6], prob = params$c2)
n_sym_to_recov = n_occur[6] - n_sym_to_hosp
n_hosp_to_dead = rbinom(1, size = n_occur[7], prob = params$c3)
n_hosp_to_recov = n_occur[7] - n_hosp_to_dead
# Now update the state variables
s_vec[(t+1)] = s_vec[t] - sum(n_occur[1:3])
e_vec[(t+1)] = e_vec[t] + sum(n_occur[1:3]) - n_occur[4]
ia_vec[(t+1)] = ia_vec[t] + n_e_to_asym - n_occur[5]
is_vec[(t+1)] = is_vec[t] + n_e_to_sym - n_occur[6]
ih_vec[(t+1)] = ih_vec[t] + n_sym_to_hosp - n_occur[7]
d_vec[(t+1)] = d_vec[t] + n_hosp_to_dead
r_vec[(t+1)] = r_vec[t] + n_occur[5] + n_sym_to_recov + n_hosp_to_recov
#------------------------------------------------------
#------------------------------------------------------
# Correct if any < 0
if(s_vec[(t+1)] < 0) s_vec[(t+1)] = 0
if(e_vec[(t+1)] < 0) e_vec[(t+1)] = 0
if(ia_vec[(t+1)] < 0) ia_vec[(t+1)] = 0
if(is_vec[(t+1)] < 0) is_vec[(t+1)] = 0
if(ih_vec[(t+1)] < 0) ih_vec[(t+1)] = 0
if(d_vec[(t+1)] < 0) d_vec[(t+1)] = 0
if(r_vec[(t+1)] < 0) r_vec[(t+1)] = 0
new_hospitalizations_vector <- append(new_hospitalizations_vector,
n_sym_to_hosp)
# Advance the time:
t = t + 1
}
lines(new_hospitalizations_vector ~ t_vec, col="black")
}
plot(NA,NA,
xlim = c(min(t_vec), max(t_vec)),
ylim = c(0, 20),
xlab = "Time (days)",
ylab = "New Hospitalizations per Day")
c2 =0.19
for (i in 1:50){
new_hospitalizations_vector = vector(mode="numeric")
new_hospitalizations_vector <- append(new_hospitalizations_vector, 0)
t=1
while(t <= (n_times-1)){
# Move forward one time:
n_occur = tau_leap_1step(t, tau, s_vec, e_vec, ia_vec,
is_vec, ih_vec, params)
#------------------------------------------------------
#------------------------------------------------------
# Update state variables
## First figure out which hosts go to which classes
n_e_to_asym = rbinom(1, size = n_occur[4], prob = params$c1)
n_e_to_sym = n_occur[4] - n_e_to_asym
n_sym_to_hosp = rbinom(1, size = n_occur[6], prob = params$c2)
n_sym_to_recov = n_occur[6] - n_sym_to_hosp
n_hosp_to_dead = rbinom(1, size = n_occur[7], prob = params$c3)
n_hosp_to_recov = n_occur[7] - n_hosp_to_dead
# Now update the state variables
s_vec[(t+1)] = s_vec[t] - sum(n_occur[1:3])
e_vec[(t+1)] = e_vec[t] + sum(n_occur[1:3]) - n_occur[4]
ia_vec[(t+1)] = ia_vec[t] + n_e_to_asym - n_occur[5]
is_vec[(t+1)] = is_vec[t] + n_e_to_sym - n_occur[6]
ih_vec[(t+1)] = ih_vec[t] + n_sym_to_hosp - n_occur[7]
d_vec[(t+1)] = d_vec[t] + n_hosp_to_dead
r_vec[(t+1)] = r_vec[t] + n_occur[5] + n_sym_to_recov + n_hosp_to_recov
#------------------------------------------------------
#------------------------------------------------------
# Correct if any < 0
if(s_vec[(t+1)] < 0) s_vec[(t+1)] = 0
if(e_vec[(t+1)] < 0) e_vec[(t+1)] = 0
if(ia_vec[(t+1)] < 0) ia_vec[(t+1)] = 0
if(is_vec[(t+1)] < 0) is_vec[(t+1)] = 0
if(ih_vec[(t+1)] < 0) ih_vec[(t+1)] = 0
if(d_vec[(t+1)] < 0) d_vec[(t+1)] = 0
if(r_vec[(t+1)] < 0) r_vec[(t+1)] = 0
new_hospitalizations_vector <- append(new_hospitalizations_vector,
n_sym_to_hosp)
# Advance the time:
t = t + 1
}
lines(new_hospitalizations_vector ~ t_vec, col="black")
}
plot(NA,NA,
xlim = c(min(t_vec), max(t_vec)),
ylim = c(0, 20),
xlab = "Time (days)",
ylab = "New Hospitalizations per Day")
c1 = 0.4
c2=0.19
for (i in 1:50){
new_hospitalizations_vector = vector(mode="numeric")
new_hospitalizations_vector <- append(new_hospitalizations_vector, 0)
t=1
while(t <= (n_times-1)){
# Move forward one time:
n_occur = tau_leap_1step(t, tau, s_vec, e_vec, ia_vec,
is_vec, ih_vec, params)
#------------------------------------------------------
#------------------------------------------------------
# Update state variables
## First figure out which hosts go to which classes
n_e_to_asym = rbinom(1, size = n_occur[4], prob = params$c1)
n_e_to_sym = n_occur[4] - n_e_to_asym
n_sym_to_hosp = rbinom(1, size = n_occur[6], prob = params$c2)
n_sym_to_recov = n_occur[6] - n_sym_to_hosp
n_hosp_to_dead = rbinom(1, size = n_occur[7], prob = params$c3)
n_hosp_to_recov = n_occur[7] - n_hosp_to_dead
# Now update the state variables
s_vec[(t+1)] = s_vec[t] - sum(n_occur[1:3])
e_vec[(t+1)] = e_vec[t] + sum(n_occur[1:3]) - n_occur[4]
ia_vec[(t+1)] = ia_vec[t] + n_e_to_asym - n_occur[5]
is_vec[(t+1)] = is_vec[t] + n_e_to_sym - n_occur[6]
ih_vec[(t+1)] = ih_vec[t] + n_sym_to_hosp - n_occur[7]
d_vec[(t+1)] = d_vec[t] + n_hosp_to_dead
r_vec[(t+1)] = r_vec[t] + n_occur[5] + n_sym_to_recov + n_hosp_to_recov
#------------------------------------------------------
#------------------------------------------------------
# Correct if any < 0
if(s_vec[(t+1)] < 0) s_vec[(t+1)] = 0
if(e_vec[(t+1)] < 0) e_vec[(t+1)] = 0
if(ia_vec[(t+1)] < 0) ia_vec[(t+1)] = 0
if(is_vec[(t+1)] < 0) is_vec[(t+1)] = 0
if(ih_vec[(t+1)] < 0) ih_vec[(t+1)] = 0
if(d_vec[(t+1)] < 0) d_vec[(t+1)] = 0
if(r_vec[(t+1)] < 0) r_vec[(t+1)] = 0
new_hospitalizations_vector <- append(new_hospitalizations_vector,
n_sym_to_hosp)
# Advance the time:
t = t + 1
}
lines(new_hospitalizations_vector ~ t_vec, col="black")
}
plot(NA,NA,
xlim = c(min(t_vec), max(t_vec)),
ylim = c(0, 20),
xlab = "Time (days)",
ylab = "New Hospitalizations per Day")
c1 = 0.4
c2=0.19
params = list(
beta_1 = beta_1,
beta_2 = beta_2,
beta_3 = beta_3,
delta_1 = delta_1,
delta_2 = delta_2,
delta_3 = delta_3,
delta_4 = delta_4,
c1 = c1,
c2 = c2,
c3 = c3,
n_pop = n_pop
)
for (i in 1:50){
new_hospitalizations_vector = vector(mode="numeric")
new_hospitalizations_vector <- append(new_hospitalizations_vector, 0)
t=1
while(t <= (n_times-1)){
# Move forward one time:
n_occur = tau_leap_1step(t, tau, s_vec, e_vec, ia_vec,
is_vec, ih_vec, params)
#------------------------------------------------------
#------------------------------------------------------
# Update state variables
## First figure out which hosts go to which classes
n_e_to_asym = rbinom(1, size = n_occur[4], prob = params$c1)
n_e_to_sym = n_occur[4] - n_e_to_asym
n_sym_to_hosp = rbinom(1, size = n_occur[6], prob = params$c2)
n_sym_to_recov = n_occur[6] - n_sym_to_hosp
n_hosp_to_dead = rbinom(1, size = n_occur[7], prob = params$c3)
n_hosp_to_recov = n_occur[7] - n_hosp_to_dead
# Now update the state variables
s_vec[(t+1)] = s_vec[t] - sum(n_occur[1:3])
e_vec[(t+1)] = e_vec[t] + sum(n_occur[1:3]) - n_occur[4]
ia_vec[(t+1)] = ia_vec[t] + n_e_to_asym - n_occur[5]
is_vec[(t+1)] = is_vec[t] + n_e_to_sym - n_occur[6]
ih_vec[(t+1)] = ih_vec[t] + n_sym_to_hosp - n_occur[7]
d_vec[(t+1)] = d_vec[t] + n_hosp_to_dead
r_vec[(t+1)] = r_vec[t] + n_occur[5] + n_sym_to_recov + n_hosp_to_recov
#------------------------------------------------------
#------------------------------------------------------
# Correct if any < 0
if(s_vec[(t+1)] < 0) s_vec[(t+1)] = 0
if(e_vec[(t+1)] < 0) e_vec[(t+1)] = 0
if(ia_vec[(t+1)] < 0) ia_vec[(t+1)] = 0
if(is_vec[(t+1)] < 0) is_vec[(t+1)] = 0
if(ih_vec[(t+1)] < 0) ih_vec[(t+1)] = 0
if(d_vec[(t+1)] < 0) d_vec[(t+1)] = 0
if(r_vec[(t+1)] < 0) r_vec[(t+1)] = 0
new_hospitalizations_vector <- append(new_hospitalizations_vector,
n_sym_to_hosp)
# Advance the time:
t = t + 1
}
lines(new_hospitalizations_vector ~ t_vec, col="black")
}
c2 = 0.19
plot(NA,NA,
xlim = c(0, 1),
ylim = c(0, 200),
xlab = "Proportion of Sypmtomatic Hospitalized",
ylab = "Average Peak of Hospitalizations")
for (i in 1:50){
c1 = runif(1, 0, 1)
params = list(
beta_1 = beta_1,
beta_2 = beta_2,
beta_3 = beta_3,
delta_1 = delta_1,
delta_2 = delta_2,
delta_3 = delta_3,
delta_4 = delta_4,
c1 = c1,
c2 = c2,
c3 = c3,
n_pop = n_pop
)
peak_hospitalized_vec = vector(mode="numeric")
for (j in 1:50){
peak_hospitalized = 0
t=1
while(t <= (n_times-1)){
# Move forward one time:
n_occur = tau_leap_1step(t, tau, s_vec, e_vec, ia_vec,
is_vec, ih_vec, params)
#------------------------------------------------------
#------------------------------------------------------
# Update state variables
## First figure out which hosts go to which classes
n_e_to_asym = rbinom(1, size = n_occur[4], prob = params$c1)
n_e_to_sym = n_occur[4] - n_e_to_asym
n_sym_to_hosp = rbinom(1, size = n_occur[6], prob = params$c2)
n_sym_to_recov = n_occur[6] - n_sym_to_hosp
n_hosp_to_dead = rbinom(1, size = n_occur[7], prob = params$c3)
n_hosp_to_recov = n_occur[7] - n_hosp_to_dead
# Now update the state variables
s_vec[(t+1)] = s_vec[t] - sum(n_occur[1:3])
e_vec[(t+1)] = e_vec[t] + sum(n_occur[1:3]) - n_occur[4]
ia_vec[(t+1)] = ia_vec[t] + n_e_to_asym - n_occur[5]
is_vec[(t+1)] = is_vec[t] + n_e_to_sym - n_occur[6]
ih_vec[(t+1)] = ih_vec[t] + n_sym_to_hosp - n_occur[7]
d_vec[(t+1)] = d_vec[t] + n_hosp_to_dead
r_vec[(t+1)] = r_vec[t] + n_occur[5] + n_sym_to_recov + n_hosp_to_recov
#------------------------------------------------------
#------------------------------------------------------
# Correct if any < 0
if(s_vec[(t+1)] < 0) s_vec[(t+1)] = 0
if(e_vec[(t+1)] < 0) e_vec[(t+1)] = 0
if(ia_vec[(t+1)] < 0) ia_vec[(t+1)] = 0
if(is_vec[(t+1)] < 0) is_vec[(t+1)] = 0
if(ih_vec[(t+1)] < 0) ih_vec[(t+1)] = 0
if(d_vec[(t+1)] < 0) d_vec[(t+1)] = 0
if(r_vec[(t+1)] < 0) r_vec[(t+1)] = 0
# Advance the time:
t = t + 1
}
peak_hospitalized = max(ih_vec)
peak_hospitalized_vec <- append(peak_hospitalized_vec, peak_hospitalized)
}
peak_hospitalized_avg = mean(peak_hospitalized_vec)
points(c1, peak_hospitalized_avg, col="black")
}
View(tau_leap_1step)
