times = time_ode,
func = Human_Mosquito_ODE,
method="ode45", # Runge-Kutta 4-5 method
parms = params)
# Object 'out' is a matrix
# Specify the column names, convert to data frame:
colnames(out) = c("time", "xM", "yM", "xH", "yH", "zH")
out = data.frame(out)
plot(x=NA,
y=NA,
xlim = c(0, max(time_ode)),
ylim = c(0, 5),
xlab = "Time (Days)",
ylab = "Population (%)")
# Plot one line at a time:
lines(out$xM ~ out$time, lty = 1, col = "red")
lines(out$yM ~ out$time, lty = 1, col = "orange")
lines(out$xH ~ out$time, lty = 1, col = "green")
lines(out$yH ~ out$time, lty = 1, col = "blue")
lines(out$zH ~ out$time, lty = 1, col = "purple")
legend(0, 5,
legend=c("Mosq. (Susceptible)",
"Mosq. (Infected)",
"Humans (Susceptible)",
"Humans (Infected)",
"Humans (Recovered)"),
col=c("red", "orange", "green", "blue", "purple"),
lty = 1, title="Legend", cex = 0.8)
library(deSolve)
muM = 1/(70*365)
muH = 1/(70*365)
nM = 1000
nH = 100
r = 0.75
tMH = 0.32
tHM = 0.78
gammaH = 1/10
params = c(muM = muM,
muH = muH,
nM = nM,
r = r,
tMH = tMH,
tHM = tHM,
gammaH = gammaH)
Human_Mosquito_ODE = function(t, y, params){
with(as.list(c(y, params)), {
dydt = rep(0, 5)
# Mosquito Equations
dydt[1] = (muM * nM) - (r * tMH * y[1] * y[4]) - (muM * y[1])
dydt[2] = (r * tMH * y[1] * y[4]) - (muM * y[2])
# Human Equations
dydt[3] = (muH * nH) - (r * tHM * y[3] * y[2]) - (muH * y[3])
dydt[4] = (r * tHM * y[3] * y[2]) - ((gammaH + muH) * y[4])
dydt[5] = (gammaH * y[4]) - (muH * y[5])
return(list(dydt))
})
}
#Initial conditions
xM = 0.999
yM = 1 - xM
xH = 0.999
yH = 1 - xH
zH = 0
# Store in a vector
inits = c(xM, yM, xH, yH, zH)
# Each time step that will be solved
time_ode = seq(0, 100, by = 0.1)
# Run ODE
out = ode(y = inits,
times = time_ode,
func = Human_Mosquito_ODE,
method="ode45", # Runge-Kutta 4-5 method
parms = params)
# Object 'out' is a matrix
# Specify the column names, convert to data frame:
colnames(out) = c("time", "xM", "yM", "xH", "yH", "zH")
out = data.frame(out)
plot(x=NA,
y=NA,
xlim = c(0, max(time_ode)),
ylim = c(0, 5),
xlab = "Time (Days)",
ylab = "Population (%)")
# Plot one line at a time:
lines(out$xM ~ out$time, lty = 1, col = "red")
lines(out$yM ~ out$time, lty = 1, col = "orange")
lines(out$xH ~ out$time, lty = 1, col = "green")
lines(out$yH ~ out$time, lty = 1, col = "blue")
lines(out$zH ~ out$time, lty = 1, col = "purple")
legend(0, 5,
legend=c("Mosq. (Susceptible)",
"Mosq. (Infected)",
"Humans (Susceptible)",
"Humans (Infected)",
"Humans (Recovered)"),
col=c("red", "orange", "green", "blue", "purple"),
lty = 1, title="Legend", cex = 0.8)
library(deSolve)
muM = 1/(70*365)
muH = 1/(70*365)
nM = 1000
nH = 100
r = 0.75
tMH = 0.3
tHM = 0.3
gammaH = 1/10
params = c(muM = muM,
muH = muH,
nM = nM,
r = r,
tMH = tMH,
tHM = tHM,
gammaH = gammaH)
Human_Mosquito_ODE = function(t, y, params){
with(as.list(c(y, params)), {
dydt = rep(0, 5)
# Mosquito Equations
dydt[1] = (muM * nM) - (r * tMH * y[1] * y[4]) - (muM * y[1])
dydt[2] = (r * tMH * y[1] * y[4]) - (muM * y[2])
# Human Equations
dydt[3] = (muH * nH) - (r * tHM * y[3] * y[2]) - (muH * y[3])
dydt[4] = (r * tHM * y[3] * y[2]) - ((gammaH + muH) * y[4])
dydt[5] = (gammaH * y[4]) - (muH * y[5])
return(list(dydt))
})
}
#Initial conditions
xM = 0.999
yM = 1 - xM
xH = 0.999
yH = 1 - xH
zH = 0
# Store in a vector
inits = c(xM, yM, xH, yH, zH)
# Each time step that will be solved
time_ode = seq(0, 100, by = 0.1)
# Run ODE
out = ode(y = inits,
times = time_ode,
func = Human_Mosquito_ODE,
method="ode45", # Runge-Kutta 4-5 method
parms = params)
# Object 'out' is a matrix
# Specify the column names, convert to data frame:
colnames(out) = c("time", "xM", "yM", "xH", "yH", "zH")
out = data.frame(out)
plot(x=NA,
y=NA,
xlim = c(0, max(time_ode)),
ylim = c(0, 5),
xlab = "Time (Days)",
ylab = "Population (%)")
# Plot one line at a time:
lines(out$xM ~ out$time, lty = 1, col = "red")
lines(out$yM ~ out$time, lty = 1, col = "orange")
lines(out$xH ~ out$time, lty = 1, col = "green")
lines(out$yH ~ out$time, lty = 1, col = "blue")
lines(out$zH ~ out$time, lty = 1, col = "purple")
legend(0, 5,
legend=c("Mosq. (Susceptible)",
"Mosq. (Infected)",
"Humans (Susceptible)",
"Humans (Infected)",
"Humans (Recovered)"),
col=c("red", "orange", "green", "blue", "purple"),
lty = 1, title="Legend", cex = 0.8)
library(deSolve)
muM = 1/(35*365)
muH = 1/(70*365)
nM = 1000
nH = 100
r = 0.75
tMH = 0.3
tHM = 0.3
gammaH = 1/10
params = c(muM = muM,
muH = muH,
nM = nM,
r = r,
tMH = tMH,
tHM = tHM,
gammaH = gammaH)
Human_Mosquito_ODE = function(t, y, params){
with(as.list(c(y, params)), {
dydt = rep(0, 5)
# Mosquito Equations
dydt[1] = (muM * nM) - (r * tMH * y[1] * y[4]) - (muM * y[1])
dydt[2] = (r * tMH * y[1] * y[4]) - (muM * y[2])
# Human Equations
dydt[3] = (muH * nH) - (r * tHM * y[3] * y[2]) - (muH * y[3])
dydt[4] = (r * tHM * y[3] * y[2]) - ((gammaH + muH) * y[4])
dydt[5] = (gammaH * y[4]) - (muH * y[5])
return(list(dydt))
})
}
#Initial conditions
xM = 0.999
yM = 1 - xM
xH = 0.999
yH = 1 - xH
zH = 0
# Store in a vector
inits = c(xM, yM, xH, yH, zH)
# Each time step that will be solved
time_ode = seq(0, 100, by = 0.1)
# Run ODE
out = ode(y = inits,
times = time_ode,
func = Human_Mosquito_ODE,
method="ode45", # Runge-Kutta 4-5 method
parms = params)
# Object 'out' is a matrix
# Specify the column names, convert to data frame:
colnames(out) = c("time", "xM", "yM", "xH", "yH", "zH")
out = data.frame(out)
plot(x=NA,
y=NA,
xlim = c(0, max(time_ode)),
ylim = c(0, 5),
xlab = "Time (Days)",
ylab = "Population (%)")
# Plot one line at a time:
lines(out$xM ~ out$time, lty = 1, col = "red")
lines(out$yM ~ out$time, lty = 1, col = "orange")
lines(out$xH ~ out$time, lty = 1, col = "green")
lines(out$yH ~ out$time, lty = 1, col = "blue")
lines(out$zH ~ out$time, lty = 1, col = "purple")
legend(0, 5,
legend=c("Mosq. (Susceptible)",
"Mosq. (Infected)",
"Humans (Susceptible)",
"Humans (Infected)",
"Humans (Recovered)"),
col=c("red", "orange", "green", "blue", "purple"),
lty = 1, title="Legend", cex = 0.8, bg="lightgrey")
library(deSolve)
muM = 1/(35*365)
muH = 1/(70*365)
nM = 100
nH = 100
r = 0.75
tMH = 0.3
tHM = 0.3
gammaH = 1/10
params = c(muM = muM,
muH = muH,
nM = nM,
r = r,
tMH = tMH,
tHM = tHM,
gammaH = gammaH)
Human_Mosquito_ODE = function(t, y, params){
with(as.list(c(y, params)), {
dydt = rep(0, 5)
# Mosquito Equations
dydt[1] = (muM * nM) - (r * tMH * y[1] * y[4]) - (muM * y[1])
dydt[2] = (r * tMH * y[1] * y[4]) - (muM * y[2])
# Human Equations
dydt[3] = (muH * nH) - (r * tHM * y[3] * y[2]) - (muH * y[3])
dydt[4] = (r * tHM * y[3] * y[2]) - ((gammaH + muH) * y[4])
dydt[5] = (gammaH * y[4]) - (muH * y[5])
return(list(dydt))
})
}
#Initial conditions
xM = 0.999
yM = 1 - xM
xH = 0.999
yH = 1 - xH
zH = 0
# Store in a vector
inits = c(xM, yM, xH, yH, zH)
# Each time step that will be solved
time_ode = seq(0, 100, by = 0.1)
# Run ODE
out = ode(y = inits,
times = time_ode,
func = Human_Mosquito_ODE,
method="ode45", # Runge-Kutta 4-5 method
parms = params)
# Object 'out' is a matrix
# Specify the column names, convert to data frame:
colnames(out) = c("time", "xM", "yM", "xH", "yH", "zH")
out = data.frame(out)
plot(x=NA,
y=NA,
xlim = c(0, max(time_ode)),
ylim = c(0, 5),
xlab = "Time (Days)",
ylab = "Population (%)")
# Plot one line at a time:
lines(out$xM ~ out$time, lty = 1, col = "red")
lines(out$yM ~ out$time, lty = 1, col = "orange")
lines(out$xH ~ out$time, lty = 1, col = "green")
lines(out$yH ~ out$time, lty = 1, col = "blue")
lines(out$zH ~ out$time, lty = 1, col = "purple")
legend(0, 5,
legend=c("Mosq. (Susceptible)",
"Mosq. (Infected)",
"Humans (Susceptible)",
"Humans (Infected)",
"Humans (Recovered)"),
col=c("red", "orange", "green", "blue", "purple"),
lty = 1, title="Legend", cex = 0.8, bg="lightgrey")
library(deSolve)
muM = 1/(35*365)
muH = 1/(70*365)
nM = 10000
nH = 100
r = 0.75
tMH = 0.3
tHM = 0.3
gammaH = 1/10
params = c(muM = muM,
muH = muH,
nM = nM,
r = r,
tMH = tMH,
tHM = tHM,
gammaH = gammaH)
Human_Mosquito_ODE = function(t, y, params){
with(as.list(c(y, params)), {
dydt = rep(0, 5)
# Mosquito Equations
dydt[1] = (muM * nM) - (r * tMH * y[1] * y[4]) - (muM * y[1])
dydt[2] = (r * tMH * y[1] * y[4]) - (muM * y[2])
# Human Equations
dydt[3] = (muH * nH) - (r * tHM * y[3] * y[2]) - (muH * y[3])
dydt[4] = (r * tHM * y[3] * y[2]) - ((gammaH + muH) * y[4])
dydt[5] = (gammaH * y[4]) - (muH * y[5])
return(list(dydt))
})
}
#Initial conditions
xM = 0.999
yM = 1 - xM
xH = 0.999
yH = 1 - xH
zH = 0
# Store in a vector
inits = c(xM, yM, xH, yH, zH)
# Each time step that will be solved
time_ode = seq(0, 100, by = 0.1)
# Run ODE
out = ode(y = inits,
times = time_ode,
func = Human_Mosquito_ODE,
method="ode45", # Runge-Kutta 4-5 method
parms = params)
# Object 'out' is a matrix
# Specify the column names, convert to data frame:
colnames(out) = c("time", "xM", "yM", "xH", "yH", "zH")
out = data.frame(out)
plot(x=NA,
y=NA,
xlim = c(0, max(time_ode)),
ylim = c(0, 5),
xlab = "Time (Days)",
ylab = "Population (%)")
# Plot one line at a time:
lines(out$xM ~ out$time, lty = 1, col = "red")
lines(out$yM ~ out$time, lty = 1, col = "orange")
lines(out$xH ~ out$time, lty = 1, col = "green")
lines(out$yH ~ out$time, lty = 1, col = "blue")
lines(out$zH ~ out$time, lty = 1, col = "purple")
legend(0, 5,
legend=c("Mosq. (Susceptible)",
"Mosq. (Infected)",
"Humans (Susceptible)",
"Humans (Infected)",
"Humans (Recovered)"),
col=c("red", "orange", "green", "blue", "purple"),
lty = 1, title="Legend", cex = 0.8, bg="lightgrey")
library(deSolve)
muM = 1/(35*365)
muH = 1/(70*365)
nM = 1000
nH = 100
r = 0.75
tMH = 0.3
tHM = 0.3
gammaH = 1/10
params = c(muM = muM,
muH = muH,
nM = nM,
r = r,
tMH = tMH,
tHM = tHM,
gammaH = gammaH)
Human_Mosquito_ODE = function(t, y, params){
with(as.list(c(y, params)), {
dydt = rep(0, 5)
# Mosquito Equations
dydt[1] = (muM * nM) - (r * tMH * y[1] * y[4]) - (muM * y[1])
dydt[2] = (r * tMH * y[1] * y[4]) - (muM * y[2])
# Human Equations
dydt[3] = (muH * nH) - (r * tHM * y[3] * y[2]) - (muH * y[3])
dydt[4] = (r * tHM * y[3] * y[2]) - ((gammaH + muH) * y[4])
dydt[5] = (gammaH * y[4]) - (muH * y[5])
return(list(dydt))
})
}
#Initial conditions
xM = 0.999
yM = 1 - xM
xH = 0.999
yH = 1 - xH
zH = 0
# Store in a vector
inits = c(xM, yM, xH, yH, zH)
# Each time step that will be solved
time_ode = seq(0, 100, by = 0.1)
# Run ODE
out = ode(y = inits,
times = time_ode,
func = Human_Mosquito_ODE,
method="ode45", # Runge-Kutta 4-5 method
parms = params)
# Object 'out' is a matrix
# Specify the column names, convert to data frame:
colnames(out) = c("time", "xM", "yM", "xH", "yH", "zH")
out = data.frame(out)
plot(x=NA,
y=NA,
xlim = c(0, max(time_ode)),
ylim = c(0, 5),
xlab = "Time (Days)",
ylab = "Population (%)")
# Plot one line at a time:
lines(out$xM ~ out$time, lty = 1, col = "red")
lines(out$yM ~ out$time, lty = 1, col = "orange")
lines(out$xH ~ out$time, lty = 1, col = "green")
lines(out$yH ~ out$time, lty = 1, col = "blue")
lines(out$zH ~ out$time, lty = 1, col = "purple")
legend(0, 5,
legend=c("Mosq. (Susceptible)",
"Mosq. (Infected)",
"Humans (Susceptible)",
"Humans (Infected)",
"Humans (Recovered)"),
col=c("red", "orange", "green", "blue", "purple"),
lty = 1, title="Legend", cex = 0.8, bg="lightgrey")
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h')
library(deSolve)
muM = 1/(35*365)
muH = 1/(70*365)
nM = 1000
nH = 100
r = 0.75
tMH = 0.3
tHM = 0.3
gammaH = 1/10
params = c(muM = muM,
muH = muH,
nM = nM,
r = r,
tMH = tMH,
tHM = tHM,
gammaH = gammaH)
Human_Mosquito_ODE = function(t, y, params){
with(as.list(c(y, params)), {
dydt = rep(0, 5)
# Mosquito Equations
dydt[1] = (muM * nM) - (r * tMH * y[1] * y[4]) - (muM * y[1])
dydt[2] = (r * tMH * y[1] * y[4]) - (muM * y[2])
# Human Equations
dydt[3] = (muH * nH) - (r * tHM * y[3] * y[2]) - (muH * y[3])
dydt[4] = (r * tHM * y[3] * y[2]) - ((gammaH + muH) * y[4])
dydt[5] = (gammaH * y[4]) - (muH * y[5])
return(list(dydt))
})
}
#Initial conditions
xM = 0.999
yM = 1 - xM
xH = 0.999
yH = 1 - xH
zH = 0
# Store in a vector
inits = c(xM, yM, xH, yH, zH)
# Each time step that will be solved
time_ode = seq(0, 100, by = 0.1)
# Run ODE
out = ode(y = inits,
times = time_ode,
func = Human_Mosquito_ODE,
method="ode45", # Runge-Kutta 4-5 method
parms = params)
# Object 'out' is a matrix
# Specify the column names, convert to data frame:
colnames(out) = c("time", "xM", "yM", "xH", "yH", "zH")
out = data.frame(out)
plot(x=NA,
y=NA,
xlim = c(0, max(time_ode)),
ylim = c(0, 5),
xlab = "Time (Days)",
ylab = "Total Population (%)")
# Plot one line at a time:
lines(out$xM ~ out$time, lty = 1, col = "red")
lines(out$yM ~ out$time, lty = 1, col = "orange")
lines(out$xH ~ out$time, lty = 1, col = "green")
lines(out$yH ~ out$time, lty = 1, col = "blue")
lines(out$zH ~ out$time, lty = 1, col = "purple")
legend(0, 5,
legend=c("Mosq. (Susceptible)",
"Mosq. (Infected)",
"Humans (Susceptible)",
"Humans (Infected)",
"Humans (Recovered)"),
col=c("red", "orange", "green", "blue", "purple"),
lty = 1, title="Legend", cex = 0.8, bg="lightgrey")
